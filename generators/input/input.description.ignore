site :rennes do |site_uid|      # General description of the site.
  name "Rennes"                   
  location "Rennes, France"
  web "http://www.irisa.fr"
  description ""
  latitude 48.114722
  longitude -1.679444
  email_contact
  sys_admin_contact
  security_contact
  user_support_contact
  
  # Describes the list of environments available on the site.
  # Notice the :refer_to option that creates a hard link to an existing file, starting from the ./data directory.
  %w{sid-x64-base-1.0}.each do |env_id|
    environment env_id, :refer_to => "grid5000/environments/#{env_id}"
  end
  
  cluster :paraquad do |cluster_uid|
    model "Dell PowerEdge 1950"                         
    created_at Time.parse("2006-12-01").httpdate        # Date of arrival of the cluster into Grid5000. 
                                                        # Do not forget the .httpdate call.
    
    # Describes the nodes that compose the cluster. To avoid repetition, you may enclose the description in a loop:
    64.times do |i| # index is starting at 0
      node "#{cluster_uid}-#{i+1}" do |node_uid| # node UID.
        # lists the supported job types (true, false or string value)
        supported_job_types({:deploy => true, :besteffort => true, :virtual => "ivt"}) 
        # describes the architecture of the node
        architecture({
          :smp_size => 2, # number of physical CPUs
          :smt_size => 4, # number of logical CPUs (cores)
          :platform_type => "x86_64"
          })
        # describes the processors
        processor({
          :vendor => "Intel",
          :model => "Intel Xeon",
          :version => "5148 LV",
          :clock_speed => 2.33.giga,  # giga = 10^9
          :instruction_set => "",     # x86-64, IA-64, ...
          :other_description => "",   
          :cache_l1 => nil,           # first-level unified cache size of the processor
          :cache_l1i => nil,          # first-level instruction cache size of the processor
          :cache_l1d => nil,          # first-level data cache size of the processor
          :cache_l2 => nil            # second-level unified cache size of the processor
        })
        main_memory({
          :ram_size => 4.GB(true),    # the amount of RAM (indicating true means "true bytes" (multiple of 2^10))
          :virtual_size => nil        # the amount of virtual memory (RAM+Swap)
        })
        # Information about the default operating system of the node 
        #   $ lsb_release -a.
        # =>
        #   Distributor ID: Ubuntu        = :name
        #   Description:  Ubuntu 6.10
        #   Release:  6.10                = :release
        #   Codename: edgy                = :version
        operating_system({
          :name => nil,               # name of the operating system
          :release => nil,            # release of the operating system
          :version => nil             # version of the operating system
        })
        # Describes the list of storage devices available on the node
        # Required properties include: :interface, :size
        # You may add the :driver property, or a :raid property (e.g. :raid => "0") if needed.
        storage_devices [
          {:interface => 'SATA', :size => 160.GB(false), :driver => "mptsas"}
          ]
        # Describes the list of network adapters available on the node
        # Required properties include: :interface, :rate, :switch, :network_address, :ip, :enabled
        # You may add properties such as: :driver, :vendor, :version
        # You may include adapters reserved for management (in this case, set enabled to false)
        network_adapters [
            {:interface => 'Myri-10G', :rate => 10.giga, 
              :switch => "c6509-grid", :network_address => "#{node_uid}.#{site_uid}.grid5000.fr", :ip => dns_lookup("#{node_uid}.#{site_uid}.grid5000.fr"), 
              :vendor => 'Myrinet', :version => "10G-PCIE-8A-C", :enabled => true},
            {:interface => 'Ethernet', :rate => 1.giga, :enabled => true},
            {:interface => 'Ethernet', :rate => 1.giga, :enabled => false}
          ]        
      end
    end
  end
end